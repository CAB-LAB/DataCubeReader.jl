var documenterSearchIndex = {"docs":
[{"location":"API/api_index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"API/api_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"lib/misc/#Other-functions","page":"Other functions","title":"Other functions","text":"","category":"section"},{"location":"lib/misc/","page":"Other functions","title":"Other functions","text":"    getNpY","category":"page"},{"location":"lib/misc/#EarthDataLab.Proc.getNpY","page":"Other functions","title":"EarthDataLab.Proc.getNpY","text":"getNpY(cube)\n\nGet the number of time steps per year\n\n\n\n\n\n","category":"function"},{"location":"examples/distributed/#Distributed-calculations","page":"Distributed Computations","title":"Distributed calculations","text":"","category":"section"},{"location":"examples/distributed/#Local-machine","page":"Distributed Computations","title":"Local machine","text":"","category":"section"},{"location":"examples/distributed/","page":"Distributed Computations","title":"Distributed Computations","text":"It is possible to distribute the calculations over multiple process. The following code does a time mean over all grid points using multiple CPU over a local machine.","category":"page"},{"location":"examples/distributed/","page":"Distributed Computations","title":"Distributed Computations","text":"using Distributed\naddprocs(2)\n\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using EarthDataLab\n@everywhere using Statistics\n\n@everywhere function mymean(output, pixel)\n       output = mean(pixel)\nend\n\nc = Cube()\ntair = subsetcube(c,variable=\"air_temperature_2m\", time=2001:2016)\ntair_c = map(t->t-273.15, tair)\n\nindims = InDims(TimeAxis)\noutdims = OutDims()\n\nresultcube = mapCube(mymean, tair_c, indims=indims, outdims=outdims)","category":"page"},{"location":"examples/distributed/","page":"Distributed Computations","title":"Distributed Computations","text":"In the last example, mapCube was used to map the mymean function. mapslices is a convenient function that can replace mapCube, where you can omit defining an extra function with the output argument as an input (e.g. mymean). It is possible to simply use mapslice","category":"page"},{"location":"examples/distributed/","page":"Distributed Computations","title":"Distributed Computations","text":"resultcube = mapslices(mean ∘ skipmissing, c, dims=\"time\")","category":"page"},{"location":"examples/distributed/#SLURM-cluster","page":"Distributed Computations","title":"SLURM cluster","text":"","category":"section"},{"location":"examples/distributed/","page":"Distributed Computations","title":"Distributed Computations","text":"It is also possible to distribute easily the workload on a cluster, with little modification to the code. The following code does a time mean over all grid points using multiple CPU over a SLURM cluster. To do so, we use the ClusterManagers package.","category":"page"},{"location":"examples/distributed/","page":"Distributed Computations","title":"Distributed Computations","text":"using Distributed\nusing ClusterManagers\n\naddprocs(SlurmManager(10))\n\n@everywhere using Pkg\n@everywhere Pkg.activate(\".\")\n@everywhere using EarthDataLab\n@everywhere using Statistics\n\ninpath=\"zg1000_AERday_CanESM5_esm-hist_r6i1p1f1_gn_18500101-20141231.nc\"\n\nc = Cube(inpath, \"zg1000\")\n\nresultcube = mapslices(mean ∘ skipmissing, c, dims=\"time\")","category":"page"},{"location":"examples/time_mean/#How-to-calculate-a-time-mean","page":"Time Mean","title":"How to calculate a time mean","text":"","category":"section"},{"location":"examples/time_mean/","page":"Time Mean","title":"Time Mean","text":"using EarthDataLab\nc = Cube()\ncitaly = c[var = [\"air_temperature_2m\", \"evaporation\"], region=\"Italy\", time=2001:2003]\nmapslices(mean ∘ skipmissing, c, dims=\"Time\")","category":"page"},{"location":"API/analysis/#Analysis","page":"Analysis","title":"Analysis","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The EarthDataLab package comes with a list of predefined methods for statistical analysis. The functions are defined to work on specific axes. For example a function that removes the mean annual cycle, will always extract one time series after the other from a cube, process them, store the results and concatenate the resulting time series to a new output cube. It does not matter which other axes are defined in the input cube, the function will simply iterate over these.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The function will be applied to the whole cube in a memory-efficient way, which means that chunks of data are read, processed and then saved in the output cube. Whether the output cube is a ZarrCube or a CubeMem is decided by the system, depending on parallelization and the size of the output cube.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Here follows a list of analysis functions included in this package. If you have implemented or wrapped a method, that might be of interest to a broader community, please feel free to open a pull request.","category":"page"},{"location":"API/analysis/#Built-in-Functions","page":"Analysis","title":"Built-in Functions","text":"","category":"section"},{"location":"API/analysis/#Seasonal-cycles","page":"Analysis","title":"Seasonal cycles","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"All of these functions take a data cube as an argument, process the input axis and replace it with the output axis.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"    EarthDataLab.Proc.removeMSC\n    EarthDataLab.Proc.gapFillMSC\n    EarthDataLab.Proc.gapfillpoly!\n    EarthDataLab.Proc.getMSC\n    EarthDataLab.Proc.getMedSC","category":"page"},{"location":"API/analysis/#Time-series-decomposition","page":"Analysis","title":"Time series decomposition","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"This function takes a data cube as an argument. It adds an additional dimension to the cube and returns it. Every variable, time step and location will have a set of four values in the new dimension instead of just one.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"    EarthDataLab.Proc.filterTSFFT","category":"page"},{"location":"API/analysis/#Simple-Statistics","page":"Analysis","title":"Simple Statistics","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Another typical use case is the application of basic statistics like sum, mean and std applied on one or more cube axes. We therefore overload the method mapslices for data cubes.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The main difference to the function exported in Base is that the dimensions to be sliced over are given by name and not by dimension index. For example,","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"mapslices(mean, cube, dims=(\"Lon\",\"Lat\"))","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"will compute the mean over each spatial map contained in the data cube. Please note that the mapslices function will execute the function once with random number input to determine the shape of the returned values and then pre-allocate the output array. Keep this in mind when your function has some side-effects. Although the mapslices function should work in most cases, it is advised to read about the mapCube function in YAXArrays.jl which gives you much more detailed control over the mapping operation.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Applying these basic statistics functions makes sense, if the slices one wants to reduce fit in memory. However, if one wants to calculate some statistics on e.g. a time x lon x lat cube, one would preferably call one of the (Weighted-)OnlineStats methods.  ","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"An additional simple statistic function is:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"    EarthDataLab.Proc.normalizeTS\n    EarthDataLab.Proc.quantile","category":"page"},{"location":"API/analysis/#EarthDataLab.Proc.normalizeTS","page":"Analysis","title":"EarthDataLab.Proc.normalizeTS","text":"normalizeTS(c)\n\nNormalize a time series to zero mean and unit variance\n\nInput Axes TimeAxis\n\nOutput Axes TimeAxis\n\n\n\n\n\n","category":"function"},{"location":"API/analysis/#Statistics.quantile","page":"Analysis","title":"Statistics.quantile","text":"quantile(c,p=[0.25,0.5,0.75];by=(),nbins=100)\n\nComputes the quantile of a data cube based on fitting a Histogram on the data using an Online statistic.\n\n\n\n\n\n","category":"function"},{"location":"API/analysis/#(Weighted-)OnlineStats","page":"Analysis","title":"(Weighted-)OnlineStats","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"It is possible to directly apply statistics included in the OnlineStats.jl package, as well as the WeightedOnlineStats.jl package on the data cube. Thus, statistical operations on data too big to fit into memory can be handled. The way to do this, is to first create a table interface to the cube, using the CubeTable function and then applying the required type of statistic using the cubefittable function:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"cTable = CubeTable(value=cube,include_axes=(\"lat\", \"lon\", \"time\", \"variable\"),fastest=\"variable\")\noutCube = cubefittable(cTable, o, :value; by=by, weight=weightfun)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"where o is a (Weighted-)OnlineStat data type and cube is the cube you want to apply the statistics to. The parameter name value in the CubeTable function and the corresponding symobl :value in the example above can be chosen arbitrarily, as long as they are equal in the macro and the cubefittable function. By default the cubefittable function will reduce all values over all axes of the cube, so if you want to do statistics grouped by variables on a certain axis, it has to be specified using the by keyword argument. by accepts a tuple of symbols and/or functions. If the cube supplied to the macro has more than one variable, it makes sense to at least supply by=(:variable,) to the function or else values of different variables will be mixed during calculation. The use of WeightedOnlineStats is encouraged to compensate for the increasing number of grid cells per area unit in higher latitudes.","category":"page"},{"location":"API/analysis/#Online-Histograms-and-quantiles","page":"Analysis","title":"Online Histograms and quantiles","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"It is possible to estimate histograms and quantiles of larger-than-memory datasets using an adaptive-bin histogram algorithm. The Base.quantile method is overloaded for objects of type YAXarray, so the following works to estimate the 10% and 90% quantiles of all datapoints for each variable:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"using WeightedOnlineStats\nc=Cube()\nd=subsetcube(c,variable=[\"gross_primary_productivity\",\"net_ecosystem_exchange\"], region=\"Europe\")\ncTable = CubeTable(value=d,axes=(\"lat\",\"lon\",\"time\",\"variable\"))\n\nfitCube=cubefittable(cTable, WeightedHist(20), :value, by=(:variable,), weight=(i->cosd(i.lat)))\n\nq = quantile(fitCube,[0.1,0.9])","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"In-Memory data cube with the following dimensions\nQuantile            Axis with 2 Elements from 0.1 to 0.9\nVariable            Axis with 2 elements: gross_primary_productivity net_ecosystem_exchange\nTotal size: 36.0 bytes","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"q.data","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"2×2 Array{Union{Missing, Float64},2}:\n 0.169621  -1.75922\n 6.04165    0.641276","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The WeightedHist call in the cubefittable function requires an integer argument, which sets the number of adaptive bins per histogram.","category":"page"},{"location":"API/analysis/#Elementwise-calculations","page":"Analysis","title":"Elementwise calculations","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Doing elementwise calculations on the cube is generally done using the map function. A simple example is the conversion of degree Kelvin to degree Celsius. To subtract from each element of a data cube with 273.15, you can call","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"c=Cube()\nkelvinCube = subsetcube(c, variable=\"air_temperature_2m\", region=\"Europe\")\ncelsiusCube = map(x -> x-273.15, kelvinCube)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Transformed cube Data Cube view with the following dimensions\nLon                 Axis with 172 Elements from -9.875 to 32.875\nLat                 Axis with 140 Elements from 69.875 to 35.125\nTime                Axis with 1702 Elements from 1980-01-01 to 2016-12-26\nTotal size: 195.43 MB","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"This will not execute the computation immediately, but on the fly during the next computation or plotting. Please note that all values in the cube will be subject to the operation. So if the cube has more than one variable, this operation will apply to the values of all variables. The following is an example for mapping multiple values:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"c=Cube()\ntime = (Date(\"2001-01-01\"), Date(\"2001-12-31\"))\n\nfirstCube = subsetcube(c, time=time, variable=\"precipitation\")\nsecondCube = subsetcube(c, time=time, variable=\"interception_loss\")\ndiffcube = map((x,y)->x-y, firstCube, secondCube)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Transformed cube Data Cube view with the following dimensions\nLon                 Axis with 1440 Elements from -179.875 to 179.875\nLat                 Axis with 720 Elements from 89.875 to -89.875\nTime                Axis with 46 Elements from 2001-01-01 to 2001-12-27\nTotal size: 227.42 MB","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"This calculates the difference of two data cubes, in this case the difference of precipitation and interception. Note here, that in this case both cubes must have the exact same dimensions and the dimensions must consist of the same elements.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Common operations like the above examples can even be expressed in an easier way:  commonly used operators (+, -, *, /, max, min) and functions (sin, cos, exp, log, log10) are overloaded and can be applied on data cubes directly. So celsiusCube = (kelvinCube - 273.15) and diffcube = abs(firstCube - secondCube) would work as expected.","category":"page"},{"location":"API/analysis/#Applying-custom-functions","page":"Analysis","title":"Applying custom functions","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The main feature of this package, and probably the one one that is most different to other geospatial frameworks is the mapCube function that executes arbitrary functions on arbitrary slices (and permutations) of one or more input data cubes. The function can be written in Julia or call into C libraries, call other packages, etc. In addition, the computation will be carried out in a memory-efficient manner, such that  data is read only in chunks, processed and then re-written slice-by-slice to allow out-of-core computation. The basic working principles are:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The user-defined function (UDF) f takes a number N_in of arrays as input and its output is represented in a number N_out of output arrays.\nThe function f has at least N_out + N_in arguments, where so its signature is f(xout1, xout2, .... ,xoutN, xin1, xin2, ... xinN, addargs...; kwargs...)\nEvery input array of f will be a slice of an input data cube. The user specifies the axes that will be used for slicing by creating an InDims object for every input cube object and passing it to the mapCube function.\nThe dimensions of every output array have to be specified by the user by creating an OutDims object for every output cube and passing it to the mapCube function.\nThe input data cubes may have additional dimensions which are not used for slicing, these will be iterated over and the function f will be called repeatedly for every slice. If there are multiple input cubes, and contain additional axes of the same name, they are required to have the same axis elements, so that these elements are matched in the loop. If different input cubes have differently named additional axes, their outer product will be applied and the axes will all be added to the output cubes.","category":"page"},{"location":"API/analysis/#A-minimal-example","page":"Analysis","title":"A minimal example","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"In order to understand how these principles are applied, let us walk through a very basic example, namely a function that normalizes the time series of a data cube. This means, we want to scale each time series in the cube in a way so its mean will be 0 and its standard deviation will be 1. To translate this into the principles mentioned above:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Our function that we want to writes will take a 1D-array as an input (a time series) and write an output of the same length.\nSo the function will have to accept two arguments, which will be called xin for the input time series and xout for the output time series. Such a function can be defined like this:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"using EarthDataLab\n\nfunction mynorm(xout, xin)\n\n    m = mean(skipmissing(xin))\n    s = std(skipmissing(xin))\n\n    if s > 0 # std non-zero\n        xout[:].=(xin.-m)./s # elementwise calculation of normalized values\n    else # time series is probably constant\n        xout[:]=0\n    end\nend","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Next we have to define the input dimensions for our data cube. We want the function to operate on the time axis, so we create an object:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"indims = InDims(\"Time\")","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The InDims constructor takes any number of positional arguments and tries to convert them into a description of a cube axis, so you can pass it a string, an axis type or an axis itself, all of which will be matched against the axes of the input data cube. Next we define the output axis:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"outdims = OutDims(\"Time\")","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Similarly to the input cube constructor, for OutDims any number of descriptors is allowed. When passed a single string or axis type, then a matching input axis will be used as the output dimension. However, when a new output axis is created by the function, other possibilities for the output axis description are possible.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Having defined these objects, we can finally load a data cube handle and apply the function, the dimension description gets passed using the indims and outdims keywords:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"c = Cube()\nd = subsetcube(c,variable = [\"gross_primary_productivity\", \"net_ecosystem_exchange\"],time=(Date(2001),Date(2002,12,31)), lon = (50,51), lat=(30,31))\nd_norm = mapCube(mynorm, d, indims=indims, outdims=outdims)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"In-Memory data cube with the following dimensions\nTime                Axis with 92 Elements from 2001-01-01 to 2002-12-27\nLon                 Axis with 4 Elements from 50.125 to 50.875\nLat                 Axis with 4 Elements from 30.875 to 30.125\nVariable            Axis with 2 elements: gross_primary_productivity net_ecosystem_exchange\nTotal size: 14.38 KB","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The resulting cube has the same dimensions like the input cube. All variables except Time were just looped over and the result was stored in a new data cube.","category":"page"},{"location":"API/analysis/#Calculations-on-multiple-cubes","page":"Analysis","title":"Calculations on multiple cubes","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The first example showed how to handle a single input- and a single output- data cube. Here we give a first example for doing an operation on two output cubes having different shapes. To do this, let's go back to the myNorm example and assume that we do not only want to return the normalized time series but also the standard deviation and the mean of each time series. The problem is, that mean and standard deviation are scalars while the time series is a vector so they can not easily be coerced into a single output cube. The solution is to return multiple output cubes. So we define the norm function and Indims and Outdims as follows:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"function mynorm_return_stdm(xout_ts, xout_m, xout_s, xin)\n  # Check if we have only missing values\n  if all(ismissing,xin)\n    xout_ts[:].=missing\n    xout_m[1]=missing\n    xout_s[1]=missing\n  else\n    m = mean(skipmissing(xin))\n    s = std(skipmissing(xin))\n    if s>0 # See if time series is not constant\n      xout_ts[:].=(xin.-m)./s\n    else #Time series is probably constant\n      xout_ts[:].=0.0\n    end\n    # Now write mean and std to output\n    xout_s[1]=s\n    xout_m[1]=m\n  end\nend\n\nindims     = InDims(\"Time\")\noutdims_ts = OutDims(\"Time\")\noutdims_m  = OutDims()\noutdims_s  = OutDims()\n\nd_norm, m, s = mapCube(mynorm_return_stdm, d, indims=indims, outdims=(outdims_ts, outdims_m, outdims_s))","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"(Memory mapped cube with the following dimensions\nTime                Axis with 506 Elements from 2001-01-01 to 2011-12-27\nLon                 Axis with 172 Elements from -9.875 to 32.875\nLat                 Axis with 140 Elements from 69.875 to 35.125\nVariable            Axis with 2 elements: gross_primary_productivity transpiration\nTotal size: 116.2 MB\n, In-Memory data cube with the following dimensions\nLon                 Axis with 172 Elements from -9.875 to 32.875\nLat                 Axis with 140 Elements from 69.875 to 35.125\nVariable            Axis with 2 elements: gross_primary_productivity transpiration\nTotal size: 235.16 KB\n, In-Memory data cube with the following dimensions\nLon                 Axis with 172 Elements from -9.875 to 32.875\nLat                 Axis with 140 Elements from 69.875 to 35.125\nVariable            Axis with 2 elements: gross_primary_productivity transpiration\nTotal size: 235.16 KB\n)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"First of all lets see what changed. We added two more arguments to the UDF, which are the additional output arrays xout_m and xout_s. They contain the additional output cubes. Then we added an additional output cube description OutDims() for each cube, which has no argument, because these outputs are singular values (mean and standard deviation per location and variable) and don't contain any dimensions. When we apply the function, we simply pass a tuple of output cube descriptions to the outdims keyword and the mapCube function returns then three cubes: the full (time x lon x lat x variable) cube for the normalized time series and two (lon x lat x variable) cubes for mean and standard deviation.   ","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Of course, this also works the same way if you want to apply a function to multiple input data cubes. To stay with the normalization example, we assume that we want to normalize our dataset with some externally given standard deviation and mean, which are different for every pixel. Then multiple InDims objects have to be defined:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"indims_ts = InDims(\"Time\")\nindims_m  = InDims()\nindims_s  = InDims()\noutdims   = OutDims(\"Time\")","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"and define the function that does the scaling, which accepts now additional arguments for the scaling and offset:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"function mynorm_given_stdm(xout, xin_ts, m, s)\n  xout[:]=(xin_ts[:].-m[1])./s[1]\nend\n\nmapCube(mynorm_given_stdm, (d,m,s), indims = (indims_ts, indims_m, indims_s), outdims = outdims)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Memory mapped cube with the following dimensions\nTime                Axis with 506 Elements from 2001-01-01 to 2011-12-27\nLon                 Axis with 172 Elements from -9.875 to 32.875\nLat                 Axis with 140 Elements from 69.875 to 35.125\nVariable            Axis with 2 elements: gross_primary_productivity transpiration\nTotal size: 116.2 MB","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Note that the operation will attempt to match the axes that the cubes contain. Because the cubes d,m and s all contain a LonAxis, a LatAxis and a VariableAxis with the same values, it will loop over these, so at every pixel the corresponding mean and standard deviation values are used.","category":"page"},{"location":"API/analysis/#Axes-are-cubes","page":"Analysis","title":"Axes are cubes","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"In some cases one needs to have access to the value of an axis. For example when one wants to calculate a spatial aggregation, the latitudes are important to determine grid cell weights. To do this, one can pass a cube axis to mapCube as if it was a cube having only one dimension. The values will then correspond to the axis values (the latitudes in degrees in this case).","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"using EarthDataLab # hide\nfunction spatialAggregation(xout::Array{T,0}, xin::Matrix, latitudes::AbstractVector) where T\n  #code goes here\nend\n\n#Extract the latitude axis\nlatitudecube = EarthDataLab.getAxis(\"Lat\",cube)\n\nindims_map = InDims(LonAxis, LatAxis)\nindims_lat = InDims(LatAxis)\noutdims    = OutDims()\nmapCube(spatialAggregation, (cube,latitudecube), indims = (indims_map, indims_lat), outdims = outdims);","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Here, the function will operate on a (lon x lat) matrix and one has access to the latitude values inside the function. Note that the getAxis function is very useful in this context, since it extracts the axis of a certain name from a given data cube object. Then we pass the cube axis as a second input cube to the mapCube function (see also Calculations on multiple cubes).","category":"page"},{"location":"API/analysis/#Passing-additional-arguments","page":"Analysis","title":"Passing additional arguments","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"If a function call needs additional arguments, they are simply appended to the mapCube call and then get passed to the function. For example, if one wants to apply a multivariate extreme event detection method detectExtremes, where one can choose from several methods, the function signature would look like this:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"function detectExtremes(xout, xin, method_name)\n  #code goes here\nend\n\ninAxes  = InDims(TimeAxis,VariableAxis)\noutAxes = OutDims(TimeAxis)\nmethod = \"KDE\"\nmapCube(detectExtremes, d, method, indims = inAxes, outdims = outAxes);","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"The method would then be called e.g. with which would pass the String \"KDE\" as the third positional argument to the function.","category":"page"},{"location":"API/analysis/#Generating-new-output-axes","page":"Analysis","title":"Generating new output axes","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"So far in our examples we always re-used axes from the input cube as output cube axes. However, it is possible to create new axes and use them for the resulting data cubes from a mapCube operation. The example we want to look at is a polynomial regression between two variables. Assume we want to describe the relationship between GPP and ecosystem respiration for each pixel through a polynomial of degree N.","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"So for each pixel we want to do the polynomial regression on the two variables and then return a vector of coefficients. We define the function that does the calculation as:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"using EarthDataLab\nusing Polynomials\nfunction fit_npoly(xout, var1, var2, n)\n  p = polyfit(var1, var2, n)\n  xout[:] = coeffs(p)\nend","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Now assume we want to fit a polynomial of order 2 to our variables. We first create the output axis we want to use, you can either use CategoricalAxis for non-continuous quantities or RangeAxis for continuous axes. Here we create a categorical Axis and pass it to the OutDims constructor:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"polyaxis = CategoricalAxis(\"Coefficients\",[\"Offset\",\"1\",\"2\"])\n\nindims1  = InDims(\"Time\")\nindims2  = InDims(\"Time\")\noutdims  = OutDims(polyaxis)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"So here we don't describe the output axis through a type or name, but by passing an actual object. Then we can call the mapCube function:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"c   = Cube()\ngpp = subsetcube(c,variable = \"gross_primary_productivity\",time=(Date(2001),Date(2002,12,31)), lon = (50,51), lat=(30,31))\nter = subsetcube(c,variable = \"terrestrial_ecosystem_respiration\",time=(Date(2001),Date(2002,12,31)), lon = (50,51), lat=(30,31))\n\nmapCube(fit_npoly,(gpp,ter),2,indims = (indims1,indims2), outdims = outdims)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"In-Memory data cube with the following dimensions\nCoefficients        Axis with 3 elements: Offset 1 2\nLon                 Axis with 4 Elements from 50.125 to 50.875\nLat                 Axis with 4 Elements from 30.875 to 30.125\nTotal size: 240.0 bytes","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"Returned is a 3D cube with dimensions coeff x lon x lat.","category":"page"},{"location":"API/analysis/#Wrapping-mapCube-calls-into-user-friendly-functions","page":"Analysis","title":"Wrapping mapCube calls into user-friendly functions","text":"","category":"section"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"When a certain function is used more often, it makes sense to wrap it into a single function so that the user does not have to deal with the input and output dimension description. For the polynomial regression example one could, for example, define this convenience wrapper and then call it directly, now for a third-order regression:","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"function fitpoly(cube1, cube2, n)\n  polyaxis = CategoricalAxis(\"Coefficients\",[\"Offset\";string.(1:n)])\n\n  indims1  = InDims(\"Time\")\n  indims2  = InDims(\"Time\")\n  outdims  = OutDims(polyaxis)\n\n  mapCube(fit_npoly,(cube1,cube2),n,indims = (indims1,indims2), outdims = outdims)\nend\n\nfitpoly(gpp,ter,3)","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"In-Memory data cube with the following dimensions\nCoefficients        Axis with 4 elements: Offset 1 2 3\nLon                 Axis with 4 Elements from 50.125 to 50.875\nLat                 Axis with 4 Elements from 30.875 to 30.125\nTotal size: 320.0 bytes","category":"page"},{"location":"API/analysis/","page":"Analysis","title":"Analysis","text":"This is exactly the way the built-in functions in Analysis were generated. So in case you want to contribute some functionality that you feel would benefit this package, please open a pull request at https://github.com/juliadatacubes/EarthDataLab.jl","category":"page"},{"location":"API/iotools/#Loading-and-saving-results","page":"Loading and Saving Results","title":"Loading and saving results","text":"","category":"section"},{"location":"API/iotools/","page":"Loading and Saving Results","title":"Loading and Saving Results","text":"EarthDataLab.EarthDataLabTools.@loadOrGenerate","category":"page"},{"location":"#EarthDataLab.jl","page":"Home","title":"EarthDataLab.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to explore and analyze the Earth System Data Cube","category":"page"},{"location":"#The-ESDL-Data-Cube","page":"Home","title":"The ESDL Data Cube","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: The ESDL data cube)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Earth System data cube is a collection of land surface and atmospheric Earth observation data sets on a common spatial resolution of 0.0833° x 0.0833° and a common temporal resolution of 8 days in the time range from 2001 to 2011. See the Product Handbook for more information.","category":"page"},{"location":"#Example-Jupyter-Notebooks","page":"Home","title":"Example Jupyter Notebooks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can find some example Jupyter Notebooks using ESDL.jl here","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"cube_access.md\",\n    \"analysis.md\",\n    \"iotools.md\",\n]\nDepth = 3","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of this package was funded by ESA STSE and implemented by the Max-Planck-Institute for Biogeochemistry.","category":"page"},{"location":"API/cube_access/#Accessing-the-Data-Cube","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"","category":"section"},{"location":"API/cube_access/#Open-a-datacube","page":"Accessing the Data Cube","title":"Open a datacube","text":"","category":"section"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"Before one can read data from a cube, it has to be opened. To open a data cube which is accesible through the file system, use the Cube constructor:","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"using EarthDataLab\nc = Cube(\"/patch/to/cube\")","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"EarthDataLab data cube at /Net/Groups/BGI/scratch/DataCube/v0.2.0/high-res/\nSpatial resolution:  4320x2160 at 0.083333 degrees.\nTemporal resolution: 2001-01-01T00:00:00 to 2012-01-01T00:00:00 at 8daily time steps\nVariables:           aerosol_optical_thickness_1610 aerosol_optical_thickness_550 aerosol_optical_thickness_555 aerosol_optical_thickness_659 aerosol_optical_thickness_865 air_temperature_2m bare_soil_evaporation black_sky_albedo burnt_area c_emissions country_mask evaporation evaporative_stress fractional_snow_cover gross_primary_productivity interception_loss land_surface_temperature latent_energy net_ecosystem_exchange open_water_evaporation ozone potential_evaporation precipitation root_moisture sensible_heat snow_sublimation snow_water_equivalent soil_moisture surface_moisture terrestrial_ecosystem_respiration transpiration water_mask water_vapour white_sky_albedo","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"This returns a Cube object that contains some basics information about the cube which is printed on the screen.","category":"page"},{"location":"API/cube_access/#Getting-a-data-handle","page":"Accessing the Data Cube","title":"Getting a data handle","text":"","category":"section"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"using EarthDataLab\nc=Cube()","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"var=[\"c_emissions\",\"air_temperature_2m\"]\ntime=(Date(\"2003-01-01\"),Date(\"2003-12-31\"))\ncubedata = subsetcube(c,lon=(30,31),lat=(50,51),time=time,variable=var)","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"This returns a view into the Data Cube, on which further calculations can be applied.","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"No data is read yet. In case you want to load some data into memory and store it in a Julia array, just use square-bracket indexing. For example, to read the first time step  of the first variable as a Lon-Lat array, just do","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"cubedata[:,:,1,1]","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"Here you can start to do some calculations on your sub-cube, see either Analysis for a list of methods provided by this framework or Applying custom functions to apply your own functions on the cube.","category":"page"},{"location":"API/cube_access/#Extracting-a-list-of-lon/lat-coordinates-from-a-data-cube","page":"Accessing the Data Cube","title":"Extracting a list of lon/lat coordinates from a data cube","text":"","category":"section"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"There are situations in which only a certain list of longitude/latitude pairs is needed for the analysis. One can extract such a list by first creating a cube view containing all the needed variables and then apply the extractLonLats function.","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"    EarthDataLab.Proc.extractLonLats","category":"page"},{"location":"API/cube_access/#EarthDataLab.Proc.extractLonLats","page":"Accessing the Data Cube","title":"EarthDataLab.Proc.extractLonLats","text":"extractLonLats(c,pl::Matrix)\n\nExtracts a list of longitude/latitude coordinates from a data cube. The coordinates are specified through the matrix pl where size(pl)==(N,2) and N is the number of extracted coordinates. Returns a data cube without LonAxis and LatAxis but with a SpatialPointAxis containing the input locations.\n\n\n\n\n\n","category":"function"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"Here is an example how to apply the function:","category":"page"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"cubedata = subsetcube(c,lon=(30,31),lat=(50,51),time=time,variable=var)\nll       = [30.1 50.2;\n            30.5 51.1;\n            30.7 51.1] #Lon/Lats to be extracted\ncubenew  = extractLonLats(cubedata,ll)","category":"page"},{"location":"API/cube_access/#Cube-Types","page":"Accessing the Data Cube","title":"Cube Types","text":"","category":"section"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"While the subsetcube command returns an object of type ZarrCube, which represents a view into the ESDC, other cube operations will return different types of data cubes. The returned type will depend on the size of the returned cube. If it is small enough to fit into memory, it will be a CubeMem, otherwise a ZArrayCube. All these types of data cubes share the same interface defined by, which means you can index them, do calculation using mapCube or plot them.","category":"page"},{"location":"API/cube_access/#Cube-Dimensions","page":"Accessing the Data Cube","title":"Cube Dimensions","text":"","category":"section"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"Dimensions are an essential part of each Cube in EarthDataLab. Every dimension that a cube has is associated with an axis that stores the values of the dimension. For example, a LatAxis will contain a field values representing the chosen latitudes. Similarly, a VariableAxis will contain a list of Variable names. Axes types are divided in categorical axes and axes represented by ranges. All of them are subtypes of the abstract type CubeAxis.","category":"page"},{"location":"API/cube_access/#List-of-known-regions","page":"Accessing the Data Cube","title":"List of known regions","text":"","category":"section"},{"location":"API/cube_access/","page":"Accessing the Data Cube","title":"Accessing the Data Cube","text":"    EarthDataLab.known_regions","category":"page"},{"location":"API/cube_access/#EarthDataLab.known_regions","page":"Accessing the Data Cube","title":"EarthDataLab.known_regions","text":"List of Continents\n\nAfrica\nAsia\nAustralia\nEurope\nNorth America\nSouth America\n\nList of SREX regions\n\nShort Name Long Name\nALA Alaska/N.W. Canada\nAMZ Amazon\nCAM Central America/Mexico\nCAR small islands regions Caribbean\nCAS Central Asia\nCEU Central Europe\nCGI Canada/Greenland/Iceland\nCNA Central North America\nEAF East Africa\nEAS East Asia\nENA East North America\nMED South Europe/Mediterranean\nNAS North Asia\nNAU North Australia\nNEB North-East Brazil\nNEU North Europe\nSAF Southern Africa\nSAH Sahara\nSAS South Asia\nSAU South Australia/New Zealand\nSEA Southeast Asia\nSSA Southeastern South America\nTIB Tibetan Plateau\nWAF West Africa\nWAS West Asia\nWNA West North America\nWSA West Coast South America\nANT Antarctica\nARC Arctic\nNTP Pacific Islands region\nSTP Southern Topical Pacific\nETP Pacific Islands region\nWIO West Indian Ocean\n\nList of countries\n\nShort Name Long Name\nABW Aruba\nAFG Afghanistan\nAGO Angola\nAIA Anguilla\nALB Albania\nALA Aland\nAND Andorra\nARE United Arab Emirates\nARG Argentina\nARM Armenia\nASM American Samoa\nATA Antarctica\nAshm Ashmore and Cartier Is.\nATF Fr. S. and Antarctic Lands\nATG Antigua and Barb.\nAUS Australia\nAUT Austria\nAZE Azerbaijan\nBDI Burundi\nBEL Belgium\nBEN Benin\nBFA Burkina Faso\nBGD Bangladesh\nBGR Bulgaria\nBHR Bahrain\nBHS Bahamas\nBIH Bosnia and Herz.\nBLM St. Barthelemy\nBLR Belarus\nBLZ Belize\nBMU Bermuda\nBOL Bolivia\nBRA Brazil\nBRB Barbados\nBRN Brunei\nBTN Bhutan\nBWA Botswana\nCAF Central African Rep.\nCAN Canada\nCHE Switzerland\nCHL Chile\nCHN China\nCIV Ivory Coast\nCLP Clipperton I.\nCMR Cameroon\nCNM \nCOD Congo (Kinshasa)\nCOG Congo (Brazzaville)\nCOK Cook Is.\nCOL Colombia\nCOM Comoros\nCPV Cape Verde\nCRI Costa Rica\nCSI Coral Sea Is.\nCUB Cuba\nCUW Curacao\nCYM Cayman Is.\nCYN N. Cyprus\nCYP Cyprus\nCZE Czech Rep.\nDEU Germany\nDJI Djibouti\nDMA Dominica\nDNK Denmark\nDOM Dominican Rep.\nDZA Algeria\nECU Ecuador\nEGY Egypt\nERI Eritrea\nESB Dhekelia\nESP Spain\nEST Estonia\nETH Ethiopia\nFIN Finland\nFJI Fiji\nFLK Falkland Is.\nFRA France\nFRO Faroe Is.\nFSM Micronesia\nGAB Gabon\nGaza Gaza\nGBR United Kingdom\nGEO Georgia\nGGY Guernsey\nGHA Ghana\nGIB Gibraltar\nGIN Guinea\nGMB Gambia\nGNB Guinea Bissau\nGNQ Eq. Guinea\nGRC Greece\nGRD Grenada\nGRL Greenland\nGTM Guatemala\nGUM Guam\nGUY Guyana\nHKG Hong Kong\nHMD Heard I. and McDonald Is.\nHND Honduras\nHRV Croatia\nHTI Haiti\nHUN Hungary\nIDN Indonesia\nIMN Isle of Man\nIND India\nIOA Indian Ocean Ter.\nIOT Br. Indian Ocean Ter.\nIRL Ireland\nIRN Iran\nIRQ Iraq\nISL Iceland\nISR Israel\nITA Italy\nJAM Jamaica\nJEY Jersey\nJOR Jordan\nJPN Japan\nKAB Baykonur\nKAS \nKAZ Kazakhstan\nKEN Kenya\nKGZ Kyrgyzstan\nKHM Cambodia\nKIR Kiribati\nKNA St. Kitts and Nevis\nKNM \nKOR S. Korea\nKOS Kosovo\nKWT Kuwait\nLAO Laos\nLBN Lebanon\nLBR Liberia\nLBY Libya\nLCA Saint Lucia\nLIE Liechtenstein\nLKA Sri Lanka\nLSO Lesotho\nLTU Lithuania\nLUX Luxembourg\nLVA Latvia\nMAC Macau\nMAF St. Martin\nMAR Morocco\nMCO Monaco\nMDA Moldova\nMDG Madagascar\nMDV Maldives\nMEX Mexico\nMHL Marshall Is.\nMKD Macedonia\nMLI Mali\nMLT Malta\nMMR Myanmar\nMNE Montenegro\nMNG Mongolia\nMNP N. Mariana Is.\nMOZ Mozambique\nMRT Mauritania\nMSR Montserrat\nMUS Mauritius\nMWI Malawi\nMYS Malaysia\nNAM Namibia\nNCL New Caledonia\nNER Niger\nNFK Norfolk Island\nNGA Nigeria\nNIC Nicaragua\nNIU Niue\nNLD Netherlands\nNOR Norway\nNPL Nepal\nNRU Nauru\nNZL New Zealand\nOMN Oman\nPAK Pakistan\nPAN Panama\nPCN Pitcairn Is.\nPER Peru\nPHL Philippines\nPLW Palau\nPNG Papua New Guinea\nPOL Poland\nPRI Puerto Rico\nPRK N. Korea\nPRT Portugal\nPRY Paraguay\nPYF Fr. Polynesia\nQAT Qatar\nROU Romania\nRUS Russia\nRWA Rwanda\nSAH W. Sahara\nSAU Saudi Arabia\nSDN Sudan\nSDS S. Sudan\nSEN Senegal\nSGP Singapore\nSGS S. Geo. and S. Sandw. Is.\nSHN Saint Helena\nSLB Solomon Is.\nSLE Sierra Leone\nSLV El Salvador\nSMR San Marino\nSOL Somaliland\nSOM Somalia\nSPM St. Pierre and Miquelon\nSRB Serbia\nSTP Sao Tome and Principe\nSUR Suriname\nSVK Slovakia\nSVN Slovenia\nSWE Sweden\nSWZ Swaziland\nSXM Sint Maarten\nSYC Seychelles\nSYR Syria\nTCA Turks and Caicos Is.\nTCD Chad\nTGO Togo\nTHA Thailand\nTJK Tajikistan\nTKM Turkmenistan\nTLS East Timor\nTON Tonga\nTTO Trinidad and Tobago\nTUN Tunisia\nTUR Turkey\nTUV Tuvalu\nTWN Taiwan\nTZA Tanzania\nUGA Uganda\nUKR Ukraine\nUMI U.S. Minor Outlying Is.\nURY Uruguay\nUSA United States\nUSG Guantanamo Bay USNB\nUZB Uzbekistan\nVAT Vatican\nVCT St. Vin. and Gren.\nVEN Venezuela\nVGB British Virgin Is.\nVIR U.S. Virgin Is.\nVNM Vietnam\nVUT Vanuatu\nPSE West Bank\nWLF Wallis and Futuna\nWSB Akrotiri\nWSM Samoa\nYEM Yemen\nZAF South Africa\nZMB Zambia\nZWE Zimbabwe\n\n\n\n\n\n","category":"constant"}]
}
